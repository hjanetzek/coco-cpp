#!/usr/bin/make -f
# -*- makefile -*-

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

# These additional compiler flags should bring up warnings about common
# sources of errors.
export CFLAGS += -g -Wall -Wformat=2 -Wunused -Wundef -Wextra -Wswitch-enum \
          -Wpointer-arith -Wnested-externs -Wbad-function-cast -Wcast-qual \
	  -Wcast-align -Wshadow

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O0
else
	CFLAGS += -O2
endif

configure_flags = --prefix=/usr \
  --host=$(DEB_HOST_GNU_TYPE) --build=$(DEB_BUILD_GNU_TYPE)


# get-orig-source:
#

clean:
	dh_testdir
	dh_testroot
	dh_clean
	[ ! -f Makefile ] || $(MAKE) distclean
	rm -f build-stamp configure-stamp

configure: configure-stamp
configure-stamp:
	dh_testdir
	./configure $(configure_flags) || \
	  { rc=$$?; cat config.log; exit $$rc; }
	touch $@

build: build-stamp
build-stamp: configure-stamp
	dh_testdir
	$(MAKE) -C src
	touch $@

install: build
	dh_testdir
	dh_testroot
	dh_prep
	dh_installdirs

	# Install the package into debian/coco-cpp
	$(MAKE) -C src install DESTDIR=$(CURDIR)/debian/coco-cpp

# Build architecture-independent files here.
binary-indep: build install
# We have nothing to do by default.

binary-arch: build install
	dh_testdir
	dh_testroot
	dh_installchangelogs
	dh_link
	dh_strip
	dh_compress
	dh_installdocs NOTES.mkdn src/Coco-cpp.atg
	dh_installexamples
	dh_fixperms
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb
	dh_clean -d

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install configure

# ----------------------------------------------------------------------------
