/*-----------------------------*- C++ -*-----------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

namespace Coco {

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

template<typename Type>
ArrayList<Type>::ArrayList(int size)
:
	Count(0),
	Capacity(size),
	Data_(new Type*[Capacity])
{}


template<typename Type>
ArrayList<Type>::~ArrayList()
{
	delete[] Data_;
}


template<typename Type>
void ArrayList<Type>::Add(Type *ptr)
{
	if (Count >= Capacity) {
		Capacity *= 2;
		Type** newData = new Type*[Capacity];
		for (int i=0; i<Count; i++) {
			newData[i] = Data_[i];   // copy
		}
		delete[] Data_;
		Data_ = newData;
	}

	Data_[Count++] = ptr;
}


template<typename Type>
bool ArrayList<Type>::Remove(Type *ptr)
{
	for (int i=0; i<Count; i++) {
		if (Data_[i] == ptr) {
			for (int j=i+1; j<Count; j++)
			{
				Data_[j-1] = Data_[j]; // copy down
			}
			Count--;
			return true;
		}
	}
	return false;
}


template<typename Type>
void ArrayList<Type>::Delete()
{
	for (int i=0; i<Count; i++) {
		delete Data_[i];
		Data_[i] = 0;
	}
	Count = 0;
}


template<typename Type>
void ArrayList<Type>::Clear()
{
	Count = 0;
}


template<typename Type>
Type* ArrayList<Type>::operator[](int index)
{
	if (0 <= index && index < Count)
		return Data_[index];
	else
		return reinterpret_cast<Type*>(0);
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Coco

// ************************************************************************* //
