/*-----------------------------*- C++ -*-----------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

#include "SortedList.h"
#include "Tab.h"

namespace Coco {

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

SortedList::Entry::Entry(Symbol* k, void* v) :
	Key(k),
	Value(v),
	next(0)
{}


SortedList::SortedList() :
	Count(0),
	Data(0)
{}

SortedList::~SortedList()
{}

int SortedList::Compare(Symbol *x, Symbol *y) {
	return coco_string_compareto(x->name, y->name);
}

bool SortedList::Find(Symbol* key) {
	Entry* curr = Data;
	while (curr) {
		if (!Compare(curr->Key, key))
			return true;
		curr = curr->next;
	}
	return false;
}

void SortedList::Set(Symbol *key, void *value) {
	if (!Find(key)) {
		// new entry
		Entry* curr = Data;
		Entry* prev = 0;
		Entry* newEntry = new Entry(key, value);
		if (curr) {
			// insert

			if (Compare(curr->Key, key) > 0) {  // before the first
				newEntry->next = Data;
				Data = newEntry;
			} else {
				while (curr) {
					if (Compare(curr->Key, key) < 0) {
						prev = curr;
						curr = curr->next;
					} else {
						break;
					}
				}
				prev->next = newEntry;
				newEntry->next = curr;
			}
		} else {
			Data = newEntry;             // first entry
		}
		Count++;
	} else {
		// existing entry - overwrite
		Entry* curr = Data;
		while (Compare(curr->Key, key)) {
			curr = curr->next;
		}
		curr->Value = value;
	}
}

void* SortedList::Get(Symbol* key) const // Value
{
	Entry* curr = Data;
	while (curr) {
		if (!Compare(curr->Key, key))
			return curr->Value;
		curr = curr->next;
	}
	return 0;
}


Symbol* SortedList::GetKey(int index) const // Key
{
	if (0 <= index && index < Count) {
		Entry* curr = Data;
		for (int i=0; i<index; i++) {
			curr = curr->next;
		}
		return curr->Key;
	} else {
		return 0;
	}
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Coco

// ************************************************************************* //
