/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

#ifndef COCO_NODE_H__
#define COCO_NODE_H__

#include "Position.h"
#include "State.h"
#include "Scanner.h"

namespace Coco {

// forward declarations
class Symbol;
class BitArray;

/*---------------------------------------------------------------------------*\
                            Class Node Declaration
\*---------------------------------------------------------------------------*/
class Node {
public:
	// enum constants for node kinds
	static const int t    =  1;  //!< terminal symbol
	static const int pr   =  2;  //!< pragma
	static const int nt   =  3;  //!< nonterminal symbol
	static const int clas =  4;  //!< character class
	static const int chr  =  5;  //!< character
	static const int wt   =  6;  //!< weak terminal symbol
	static const int any  =  7;  //!< any character
	static const int eps  =  8;  //!< empty
	static const int sync =  9;  //!< synchronization symbol
	static const int sem  = 10;  //!< semantic action: (. .)
	static const int alt  = 11;  //!< alternative: |
	static const int iter = 12;  //!< iteration: { }
	static const int opt  = 13;  //!< option: [ ]
	static const int rslv = 14;  //!< resolver expression

	static const int normalTrans  = 0;  //!< normal transition
	static const int contextTrans = 1;  //!< context transition

	int      n;     //!< node number
	int      typ;   //!< node type, one of t, nt, wt, chr, clas, any, eps, sem, sync, alt, iter, opt, rslv
	Node     *next; //!< to successor node
	Node     *down; //!< alt: to next alternative
	Node     *sub;  //!< alt, iter, opt: to first node of substructure
	bool     up;    //!< true: "next" leads to successor in enclosing structure
	Symbol   *sym;  //!< nt, t, wt: symbol represented by this node
	int      val;   //!< chr:  ordinal character value, clas: index of character class
	int      code;  //!< chr, clas: transition code
	BitArray *set;  //!< any, sync: the set represented by this node

	//! nt, t, wt: pos of actual attributes
	//! sem:  pos of semantic action in source text
	//! rslv: pos of resolver in source text
	Position *pos;

	int      line;  //!< source text line number of item in this node

	//! DFA state corresponding to this node
	// (only used in DFA.ConvertToStates)
	State    *state;

	Node(int typ, Symbol *sym, int line);
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Coco

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
