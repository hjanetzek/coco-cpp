/*---------------------------------*- C++ -*---------------------------------*\
    Compiler Generator Coco/R,
    Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
    extended by M. Loeberbauer & A. Woess, Univ. of Linz
    ported to C++ by Csaba Balazs, University of Szeged
    with improvements
        - Pat Terry, Rhodes University
        - 2010 Mark Olesen
-------------------------------------------------------------------------------
License
    This file is part of Compiler Generator Coco/R

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2, or (at your option) any
    later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    As an exception, it is allowed to write an extension of Coco/R that is
    used as a plugin in non-free software.

    If not otherwise stated, any source code generated by Coco/R (other than
    Coco/R itself) does not fall under the GNU General Public License.
\*---------------------------------------------------------------------------*/

#ifndef COCO_BITARRAY_H__
#define COCO_BITARRAY_H__

namespace Coco
{

/*---------------------------------------------------------------------------*\
                          Class BitArray Declaration
\*---------------------------------------------------------------------------*/

//! Compact storage of bits using byte-wise storage
class BitArray
{
	// Private data

		int size_;
		unsigned char* data_;

public:

	//! An empty BitArray
	static const BitArray null;

	// Constructors

		//! Construct null or with specified size and default value
		BitArray(const int length = 0, const bool value = false);

		//! Construct as a copy
		BitArray(const BitArray &copy);

	//! Destructor
	virtual ~BitArray();

	// Member Functions

		//! Return size
		int size() const;

		//! Reset the size and value
		void reset(const int length, const bool value = false);

		//! Get value at index I.
		bool Get(const int index) const;

		//! Set value at index I.
		void Set(const int index, const bool value);

		//! Set all bits to a particular value
		void SetAll(const bool value);

		//! Invert bits
		void Not();

		//! And with the bits in b
		void And(const BitArray& b);

		//! Or with the bits in b
		void Or(const BitArray& b);

		//! Xor with the bits in b
		void Xor(const BitArray& b);

		//! Return true if bits are identical
		bool Equal(const BitArray& b) const;

		//! Get value at index I.
		inline bool operator[](const int index) const
		{
			return Get(index);
		};

		//! Assign from BitArray
		BitArray& operator=(const BitArray& right);

	// Member Functions with pointers

		//! Construct as a copy
		inline BitArray* Clone() const
		{
			return new BitArray(*this);
		}

		//! And with the bits in b
		inline void And(const BitArray *b)
		{
			this->And(*b);
		}

		//! Or with the bits in b
		inline void Or(const BitArray *b)
		{
			this->Or(*b);
		}

		//! Xor with the bits in b
		inline void Xor(const BitArray *b)
		{
			this->Xor(*b);
		}

		//! Return true if bits are identical
		inline bool Equal(const BitArray *b) const
		{
			return this->Equal(*b);
		}


};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Coco

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
