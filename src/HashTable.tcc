/*---------------------------------*- C++ -*---------------------------------*\
    Compiler Generator Coco/R,
    Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
    extended by M. Loeberbauer & A. Woess, Univ. of Linz
    ported to C++ by Csaba Balazs, University of Szeged
    with improvements
        - Pat Terry, Rhodes University
        - 2010 Mark Olesen

    Some portions of code from OpenFOAM - Copyright (C) 2008-2009 OpenCFD Ltd.
-------------------------------------------------------------------------------
License
    This file is part of Compiler Generator Coco/R

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2, or (at your option) any
    later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    As an exception, it is allowed to write an extension of Coco/R that is
    used as a plugin in non-free software.

    If not otherwise stated, any source code generated by Coco/R (other than
    Coco/R itself) does not fall under the GNU General Public License.
\*---------------------------------------------------------------------------*/

#include <string.h>
#include <algorithm>

#include "HashTable.h"
#include "Utils.h"

namespace Coco
{

// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

template<class Type, class KeyType>
HashTable<Type, KeyType>::HashTable(int sz)
:
	size_(sz),
	table_(new Entry*[size_])
{
	memset(table_, 0, size_ * sizeof(Entry*));
}


// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //

template<class Type, class KeyType>
HashTable<Type, KeyType>::~HashTable()
{
	for (int i = 0; i < size_; ++i)
	{
		Entry *e = table_[i];
		while (e)
		{
			Entry *del = e;
			e = e->next;
			delete del;
		}
	}
	delete[] table_;
	table_ = 0;
}


// * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * * //

template<class Type, class KeyType>
typename HashTable<Type, KeyType>::Entry*
HashTable<Type, KeyType>::GetEntry(const KeyType& key) const
{
	const int hashIndex = coco_string_hash(key) % size_;
	Entry *e = table_[hashIndex];
	while (e && key != e->key)
	{
		e = e->next;
	}
	return e;
}


template<class Type, class KeyType>
void HashTable<Type, KeyType>::Set(const KeyType& key, Type *val)
{
	Entry *e = GetEntry(key);
	if (e)
	{
		// existing entry - overwrite
		e->val = val;
	}
	else
	{
		// new entry
		const int hashIndex = coco_string_hash(key) % size_;
		table_[hashIndex] = new Entry(key, val, table_[hashIndex]);
	}
}


template<class Type, class KeyType>
Type* HashTable<Type, KeyType>::Get(const KeyType& key) const
{
	Entry *e = GetEntry(key);
	return e ? e->val : NULL;
}


template<class Type, class KeyType>
typename HashTable<Type, KeyType>::constIterator
HashTable<Type, KeyType>::begin() const
{
	return typename HashTable<Type, KeyType>::constIterator(this);
}


template<class Type, class KeyType>
typename HashTable<Type, KeyType>::constIterator
HashTable<Type, KeyType>::findPointer(const Type* ptr) const
{
	typename HashTable<Type, KeyType>::constIterator iter = this->begin();

	while (iter.valid() && iter.entryPtr_->val != ptr)
	{
		iter.next();
	}

	return iter;
}


template<class Type, class KeyType>
std::vector<KeyType> HashTable<Type, KeyType>::toc(const bool sorted) const
{
	std::vector<KeyType> keys;

	for (constIterator iter = this->begin(); iter.valid(); iter.next())
	{
		keys.push_back(iter.key());
	}

	if (sorted)
	{
		std::sort(keys.begin(), keys.end());
	}

	return keys;
}


// * * * * * * * * * * * * * * * constIterator * * * * * * * * * * * * * * * //

template<class Type, class KeyType>
HashTable<Type, KeyType>::constIterator::constIterator
(
	const HashTable<Type, KeyType> *ht
)
:
	hashTable_(ht),
	entryPtr_(0),
	hashIndex_(0)
{
	// find first non-NULL table entry
	while
	(
		!(entryPtr_ = hashTable_->table_[hashIndex_])
	 && ++hashIndex_ < hashTable_->size_
	)
	{}

	// out-of-range? invalidate it
	if (hashIndex_ >= hashTable_->size_)
	{
		entryPtr_ = 0;
		hashIndex_ = 0;
	}
}


template<class Type, class KeyType>
bool HashTable<Type, KeyType>::constIterator::valid() const
{
	return entryPtr_ != NULL;
}


template<class Type, class KeyType>
void HashTable<Type, KeyType>::constIterator::next()
{
	if (entryPtr_ && entryPtr_->next)
	{
		entryPtr_ = entryPtr_->next;
		return;
	}

	// Step to the next table entry
	while
	(
		++hashIndex_ < hashTable_->size_
	 && !(entryPtr_ = hashTable_->table_[hashIndex_])
	)
	{}

	// out-of-range? invalidate it
	if (hashIndex_ >= hashTable_->size_)
	{
		entryPtr_ = 0;
		hashIndex_ = 0;
	}
}


template<class Type, class KeyType>
const KeyType& HashTable<Type, KeyType>::constIterator::key() const
{
	return entryPtr_->key;
}


template<class Type, class KeyType>
const Type* HashTable<Type, KeyType>::constIterator::value() const
{
	return entryPtr_->val;
}



// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Coco

// ************************************************************************* //
