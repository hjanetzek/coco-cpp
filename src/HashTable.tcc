/*-----------------------------*- C++ -*-----------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

#include <string.h>

#include "HashTable.h"
#include "Utils.h"

namespace Coco
{

// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

template<class Type, class KeyType>
HashTable<Type, KeyType>::HashTable(int sz)
:
	size_(sz),
	table_(new Entry*[size_])
{
	memset(table_, 0, size_ * sizeof(Entry*));
}


// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //

template<class Type, class KeyType>
HashTable<Type, KeyType>::~HashTable()
{
	for (int i = 0; i < size_; ++i)
	{
		Entry *e = table_[i];
		while (e)
		{
			Entry *del = e;
			e = e->next;
			delete del;
		}
	}
	delete[] table_;
	table_ = 0;
}


// * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * * //

template<class Type, class KeyType>
typename HashTable<Type, KeyType>::Entry*
HashTable<Type, KeyType>::GetEntry(const KeyType& key) const
{
	const int hashIndex = coco_string_hash(key) % size_;
	Entry *e = table_[hashIndex];
	while (e && key != e->key)
	{
		e = e->next;
	}
	return e;
}


template<class Type, class KeyType>
void HashTable<Type, KeyType>::Set(const KeyType& key, Type *val)
{
	Entry *e = GetEntry(key);
	if (e)
	{
		// existing entry - overwrite
		e->val = val;
	}
	else
	{
		// new entry
		const int hashIndex = coco_string_hash(key) % size_;
		table_[hashIndex] = new Entry(key, val, table_[hashIndex]);
	}
}


template<class Type, class KeyType>
Type* HashTable<Type, KeyType>::Get(const KeyType& key) const
{
	Entry *e = GetEntry(key);
	return e ? e->val : NULL;
}


template<class Type, class KeyType>
typename HashTable<Type, KeyType>::Iterator
HashTable<Type, KeyType>::GetIterator()
{
	return typename HashTable<Type, KeyType>::Iterator(this);
}


// * * * * * * * * * * * * * * * * Iterator  * * * * * * * * * * * * * * * * //

template<class Type, class KeyType>
HashTable<Type, KeyType>::Iterator::Iterator
(
	HashTable<Type, KeyType> *ht
)
:
	hashTable_(ht),
	pos_(0),
	cur_(0)
{}


template<class Type, class KeyType>
bool HashTable<Type, KeyType>::Iterator::HasNext()
{
	while (!cur_ && pos_ < hashTable_->size_)
	{
		cur_ = hashTable_->table_[pos_];
		++pos_;
	}
	return cur_ != NULL;
}


template<class Type, class KeyType>
typename HashTable<Type, KeyType>::Entry*
HashTable<Type, KeyType>::Iterator::Next()
{
	if (HasNext())
	{
		Entry *next = cur_;
		cur_ = cur_->next;
		return next;
	}
	else
	{
		return NULL;
	}
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Coco

// ************************************************************************* //
