/*-----------------------------*- C++ -*-----------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

#include "Utils.h"


namespace Coco
{

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

wchar_t* coco_string_create(const char* str)
{
    const int len = str ? strlen(str) : 0;
    wchar_t* dest = new wchar_t[len + 1];
    for (int i = 0; i < len; ++i)
    {
        dest[i] = wchar_t(str[i]);
    }
    dest[len] = 0;
    return dest;
}

void coco_string_merge(wchar_t* &dest, const wchar_t* str)
{
    if (!str) return;
    wchar_t* newstr = coco_string_create_append(dest, str);
    delete[] dest;
    dest = newstr;
}


bool coco_string_endswith(const wchar_t* str, const wchar_t* endstr)
{
    const int strLen = wcslen(str);
    const int endLen = wcslen(endstr);
    return (endLen <= strLen) && (wcscmp(str + strLen - endLen, endstr) == 0);
}


int coco_string_compareto(const wchar_t* str1, const wchar_t* str2)
{
    return wcscmp(str1, str2);
}


int coco_string_lastindexof(const wchar_t* str, const wchar_t ch)
{
    const wchar_t* fnd = wcsrchr(str, ch);
    return fnd ? (fnd - str) : -1;
}


int coco_string_checkBool(const wchar_t* str)
{
    if (coco_string_equal(str, L"true"))  return 1;
    if (coco_string_equal(str, L"false")) return 0;
    return -1;
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Coco

// ************************************************************************* //
