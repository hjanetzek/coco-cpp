/*---------------------------------*- C++ -*---------------------------------*\
    Compiler Generator Coco/R,
    Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
    extended by M. Loeberbauer & A. Woess, Univ. of Linz
    ported to C++ by Csaba Balazs, University of Szeged
    with improvements
        - Pat Terry, Rhodes University
        - 2010 Mark Olesen
-------------------------------------------------------------------------------
License
    This file is part of Compiler Generator Coco/R

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2, or (at your option) any
    later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    As an exception, it is allowed to write an extension of Coco/R that is
    used as a plugin in non-free software.

    If not otherwise stated, any source code generated by Coco/R (other than
    Coco/R itself) does not fall under the GNU General Public License.
\*---------------------------------------------------------------------------*/

namespace Coco
{

// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

template<class Type>
ArrayList<Type>::ArrayList(int size)
:
	capacity_(size),
	data_(new Type*[capacity_]),
	Count(0)
{}


// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //

template<class Type>
ArrayList<Type>::~ArrayList()
{
	delete[] data_;
}


// * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * * //

template<class Type>
void ArrayList<Type>::Add(Type *ptr)
{
	if (Count >= capacity_)
	{
		capacity_ *= 2;
		Type** newData = new Type*[capacity_];
		for (int i=0; i < Count; i++)
		{
			newData[i] = data_[i];   // copy
		}
		delete[] data_;
		data_ = newData;
	}

	data_[Count++] = ptr;
}


template<class Type>
bool ArrayList<Type>::Remove(Type *ptr)
{
	for (int i=0; i < Count; i++)
	{
		if (data_[i] == ptr)
		{
			for (int j=i+1; j < Count; j++)
			{
				data_[j-1] = data_[j]; // copy down
			}
			Count--;
			return true;
		}
	}
	return false;
}


template<class Type>
void ArrayList<Type>::Delete()
{
	for (int i=0; i < Count; i++)
	{
		delete data_[i];
		data_[i] = 0;
	}
	Count = 0;
}


template<class Type>
void ArrayList<Type>::Clear()
{
	Count = 0;
}


// * * * * * * * * * * * * * * Member Operators  * * * * * * * * * * * * * * //

template<class Type>
Type* ArrayList<Type>::operator[](int index)
{
	return (index >= 0 && index < Count)
		? data_[index]
		: reinterpret_cast<Type*>(0);
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Coco

// ************************************************************************* //
