/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

#ifndef COCO_HASHTABLE_H__
#define COCO_HASHTABLE_H__

namespace Coco
{

/*---------------------------------------------------------------------------*\
	                      Class HashTable Declaration
\*---------------------------------------------------------------------------*/

//! A simple HashTable implementation
template<class Type>
class HashTable
{
public:
	class Iterator;            //!< Forward declaration of iterators
	friend class Iterator;     //!< Declare friendship with the iterator

	//! An entry within the HashTable
	struct Entry
	{
		wchar_t *key;
		Type *val;
		Entry *next;
	};


	//! Construct with a default size
	HashTable(int size = 128);

	~HashTable();

	//! An iterator for HashTable
	class Iterator
	{
		HashTable *ht;
		int pos;
		Entry* cur;

	public:
		Iterator(HashTable<Type> *ht);
		bool HasNext();
		Entry* Next();
	};

	void Set(wchar_t *key, Type *value);

	Type* Get(const wchar_t *key) const;

	//! Return an Iterator to the first entry
	Iterator GetIterator();

	//! Same as the Get() method
	inline Type* operator[](const wchar_t *key) const
	{
		return Get(key);
	}

private:
	int size;
	Entry** data;
	Entry* GetObj(const wchar_t *key) const;

};

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Coco

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "HashTable.tcc"

#endif

// ************************************************************************* //
