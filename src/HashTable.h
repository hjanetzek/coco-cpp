/*---------------------------------*- C++ -*---------------------------------*\
    Compiler Generator Coco/R,
    Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
    extended by M. Loeberbauer & A. Woess, Univ. of Linz
    ported to C++ by Csaba Balazs, University of Szeged
    with improvements by Pat Terry, Rhodes University
-------------------------------------------------------------------------------
License
    This file is part of Compiler Generator Coco/R

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2, or (at your option) any
    later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    As an exception, it is allowed to write an extension of Coco/R that is
    used as a plugin in non-free software.

    If not otherwise stated, any source code generated by Coco/R (other than
    Coco/R itself) does not fall under the GNU General Public License.
\*---------------------------------------------------------------------------*/
#ifndef COCO_HASHTABLE_H__
#define COCO_HASHTABLE_H__

#include <string>

namespace Coco
{

/*---------------------------------------------------------------------------*\
                          Class HashTable Declaration
\*---------------------------------------------------------------------------*/

//! A simple HashTable implementation
template<class Type, class KeyType=std::wstring>
class HashTable
{
public:
	class Iterator;            //!< Forward declaration of iterators
	friend class Iterator;     //!< Declare friendship with the iterator

	//! An entry within the HashTable
	struct Entry
	{
		const KeyType key; //<! The lookup key
		Type  *val;        //<! The data
		Entry *next;       //<! Pointer next Entry in sub-list

		Entry(const KeyType& k, Type *v, Entry *n=0)
		:
			key(k), val(v), next(n)
		{}
	};



	//! Construct with a default size
	HashTable(int size = 128);

	~HashTable();

	//! An iterator for HashTable
	class Iterator
	{
		HashTable<Type, KeyType> *hashTable_;
		int pos_;
		Entry* cur_;

	public:
		explicit Iterator(HashTable<Type, KeyType> *ht);

		bool HasNext();
		Entry* Next();
	};


	//! Insert a new Entry
	void Set(const KeyType& key, Type *value);

	//- Find and return the value associated with the hashed Entry
	Type* Get(const KeyType& key) const;

	//! Return an Iterator to the first entry
	Iterator GetIterator();

	//! Same as the Get() method
	inline Type* operator[](const KeyType& key) const
	{
		return Get(key);
	}

private:
	const int size_;   //<! fixed HashTable size
	Entry** table_;

	Entry* GetEntry(const KeyType& key) const;

};

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Coco

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "HashTable.tcc"

#endif

// ************************************************************************* //
